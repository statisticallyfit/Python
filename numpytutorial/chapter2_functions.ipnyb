{
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "text": [
        "array([[1, 0],\n       [0, 1]])"
       ],
       "metadata": {}
      }
     ],
     "input": [
      "# Identity matrix\n",
      "from numpy import * \n",
      "\n",
      "identityMat = eye(2).astype(int)\n",
      "identityMat"
     ],
     "language": "python",
     "prompt_number": 5
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "# HOW TO CHANGE DIRECTORIES\n",
      "\n",
      "# import os\n",
      "# os.getcwd()\n",
      "# ...\n",
      "# os.chdir(os.getcwd() + \"\\\\..\\\\numpyTutorial\")"
     ],
     "language": "python",
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "savetxt('IO\\\\eye.txt', identityMat)"
     ],
     "language": "python",
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "x = y = z = arange(0.0, 5.0, 1.0)\n",
      "savetxt('test.txt', x, delimiter=',')"
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "text": [
        "array([ 21144800.,  13473000.,  15236800.,   9242600.,  14064100.,\n        11494200.,  17322100.,  13608500.,  17240800.,  33162400.,\n        13127500.,  11086200.,  10149000.,  17184100.,  18949000.,\n        29144500.,  31162200.,  23994700.,  17853500.,  13572000.,\n        14395400.,  16290300.,  21521000.,  17885200.,  16188000.,\n        19504300.,  12718000.,  16192700.,  18138800.,  16824200.])"
       ],
       "metadata": {}
      }
     ],
     "input": [
      "closingPrice, volume = loadtxt('IO\\\\appledatacsv.txt', delimiter=',', usecols=(6,7),\n",
      "unpack=True)\n",
      "volume"
     ],
     "language": "python",
     "prompt_number": 10
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "# ****************************************************\n",
      "\n",
      "# Volume Wieghted Average Price (VWAP)\n",
      "# idea: prices with most volume as more important\n",
      "# 1) read data into arrays\n",
      "# 2) calculate VWAP"
     ],
     "language": "python",
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "text": [
        "350.58954935320088"
       ],
       "metadata": {}
      }
     ],
     "input": [
      "vwap = average(closingPrice, weights=volume)\n",
      "vwap"
     ],
     "language": "python",
     "prompt_number": 36
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python",
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "#*****************************************************"
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "# mean function"
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "text": [
        "351.03766666666672"
       ],
       "metadata": {}
      }
     ],
     "input": [
      "from numpy import *\n",
      "mean = mean(closingPrice)\n",
      "mean"
     ],
     "language": "python",
     "prompt_number": 43
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "#*****************************************************"
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "twap = 352.428321839\n",
       "text": [
        "twap = 352.428321839\n"
       ]
      }
     ],
     "input": [
      "# Time Weighted Average Price (TWAP)\n",
      "t = arange(len(closingPrice))\n",
      "print(\"twap =\", average(closingPrice, weights=t))"
     ],
     "language": "python",
     "prompt_number": 44
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "# Range"
     ],
     "language": "python",
     "prompt_number": 32
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "high prices =  [ 344.4   340.04  345.65  345.25  344.24  346.7   353.25  355.52  359.\n  360.    357.8   359.48  359.97  364.9   360.27  359.5   345.4   344.64\n  345.15  348.43  355.05  355.72  354.35  359.79  360.29  361.67  357.4\n  354.76  349.77  352.32]\nlow prices =  [ 333.53  334.3   340.98  343.55  338.55  343.51  347.64  352.15  354.87\n  348.    353.54  356.71  357.55  360.5   356.52  349.52  337.72  338.61\n  338.37  344.8   351.12  347.68  348.4   355.92  357.75  351.31  352.25\n  350.6   344.9   345.  ]\n",
       "text": [
        "high prices =  [ 344.4   340.04  345.65  345.25  344.24  346.7   353.25  355.52  359.\n  360.    357.8   359.48  359.97  364.9   360.27  359.5   345.4   344.64\n  345.15  348.43  355.05  355.72  354.35  359.79  360.29  361.67  357.4\n  354.76  349.77  352.32]\nlow prices =  [ 333.53  334.3   340.98  343.55  338.55  343.51  347.64  352.15  354.87\n  348.    353.54  356.71  357.55  360.5   356.52  349.52  337.72  338.61\n  338.37  344.8   351.12  347.68  348.4   355.92  357.75  351.31  352.25\n  350.6   344.9   345.  ]\n"
       ]
      }
     ],
     "input": [
      "highPrices, lowPrices = loadtxt('IO\\\\appledatacsv.txt', delimiter=',', usecols=(4,5), unpack=True)\n",
      "print(\"high prices = \", highPrices)\n",
      "print(\"low prices = \", lowPrices)"
     ],
     "language": "python",
     "prompt_number": 46
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "max = 364.9\nmin = 333.53\n",
       "text": [
        "max = 364.9\nmin = 333.53\n"
       ]
      }
     ],
     "input": [
      "print(\"max =\", max(highPrices)) # the largest of the large\n",
      "print(\"min =\", min(lowPrices)) #the smallest of the small"
     ],
     "language": "python",
     "prompt_number": 47
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "text": [
        "(340.04000000000002, 360.5)"
       ],
       "metadata": {}
      }
     ],
     "input": [
      "min(highPrices), max(lowPrices)"
     ],
     "language": "python",
     "prompt_number": 48
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "Spread of high prices 24.86\nSpread of low prices 26.97\n",
       "text": [
        "Spread of high prices 24.86\nSpread of low prices 26.97\n"
       ]
      }
     ],
     "input": [
      "# Spread = range = max(array) - min(array) ==> ptp\n",
      "print(\"Spread of high prices\", ptp(highPrices))\n",
      "print(\"Spread of low prices\", ptp(lowPrices))"
     ],
     "language": "python",
     "prompt_number": 50
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "data = [ 336.1   339.32  345.03  344.32  343.44  346.5   351.88  355.2   358.16\n  354.54  356.85  359.18  359.9   363.13  358.3   350.56  338.61  342.62\n  342.88  348.16  353.21  349.31  352.12  359.56  360.    355.36  355.76\n  352.47  346.67  351.99]\nFive Number Summary = { 336.1 ,  345.3975 ,  352.055 ,  356.5775 ,  363.13 }\n",
       "text": [
        "data = [ 336.1   339.32  345.03  344.32  343.44  346.5   351.88  355.2   358.16\n  354.54  356.85  359.18  359.9   363.13  358.3   350.56  338.61  342.62\n  342.88  348.16  353.21  349.31  352.12  359.56  360.    355.36  355.76\n  352.47  346.67  351.99]\nFive Number Summary = { 336.1 ,  345.3975 ,  352.055 ,  356.5775 ,  363.13 }\n"
       ]
      }
     ],
     "input": [
      "# Statistics\n",
      "print(\"data =\", closingPrice)\n",
      "\n",
      "minimum = min(closingPrice)\n",
      "Q1 = percentile(closingPrice, 25)\n",
      "med = median(closingPrice)\n",
      "Q3 = percentile(closingPrice, 75)\n",
      "maximum = max(closingPrice)\n",
      "print(\"Five Number Summary = {\", minimum, \", \", Q1, \", \", med, \", \", Q3, \", \", maximum, \"}\")"
     ],
     "language": "python",
     "prompt_number": 53
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "text": [
        "array([ 336.1 ,  338.61,  339.32,  342.62,  342.88,  343.44,  344.32,\n        345.03,  346.5 ,  346.67,  348.16,  349.31,  350.56,  351.88,\n        351.99,  352.12,  352.47,  353.21,  354.54,  355.2 ,  355.36,\n        355.76,  356.85,  358.16,  358.3 ,  359.18,  359.56,  359.9 ,\n        360.  ,  363.13])"
       ],
       "metadata": {}
      }
     ],
     "input": [
      "sortedClosePrices = msort(closingPrice)\n",
      "sortedClosePrices"
     ],
     "language": "python",
     "prompt_number": 11
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "def findMedian(sorted):\n",
      "    N = len(sorted)\n",
      "    if N % 2 == 0:\n",
      "        #average of middle two numbers\n",
      "        return (sorted[N/2] + sorted[(N-1)/2])/2 \n",
      "    else:\n",
      "        return sorted[N/2]"
     ],
     "language": "python",
     "prompt_number": 61
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "text": [
        "352.05500000000001"
       ],
       "metadata": {}
      }
     ],
     "input": [
      "findMedian(sortedClosePrices)"
     ],
     "language": "python",
     "prompt_number": 63
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "text": [
        "50.126517888888884"
       ],
       "metadata": {}
      }
     ],
     "input": [
      "# variance\n",
      "var(closingPrice)"
     ],
     "language": "python",
     "prompt_number": 64
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "variance from definition =  50.1265178889\n",
       "text": [
        "variance from definition =  50.1265178889\n"
       ]
      }
     ],
     "input": [
      "from numpy import *\n",
      "print(\"variance from definition = \", mean((closingPrice - closingPrice.mean())**2))"
     ],
     "language": "python",
     "prompt_number": 66
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "c = closingPrice #sorted"
     ],
     "language": "python",
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "text": [
        "array([ 0.00958048,  0.01682777, -0.00205779, -0.00255576,  0.00890985,\n        0.0155267 ,  0.00943503,  0.00833333, -0.01010721,  0.00651548,\n        0.00652935,  0.00200457,  0.00897472, -0.01330102, -0.02160201,\n       -0.03408832,  0.01184253,  0.00075886,  0.01539897,  0.01450483,\n       -0.01104159,  0.00804443,  0.02112916,  0.00122372, -0.01288889,\n        0.00112562, -0.00924781, -0.0164553 ,  0.01534601])"
       ],
       "metadata": {}
      }
     ],
     "input": [
      "returns = diff(c)/c[ : -1] # the -1 means not including last c[i]\n",
      "returns"
     ],
     "language": "python",
     "prompt_number": 13
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "Standard deviation = 0.0129221344368\n",
       "text": [
        "Standard deviation = 0.0129221344368\n"
       ]
      }
     ],
     "input": [
      "#standard deviation\n",
      "print(\"Standard deviation =\", std(returns))"
     ],
     "language": "python",
     "prompt_number": 14
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "pyout",
       "text": [
        "array([ 0.00953488,  0.01668775, -0.00205991, -0.00255903,  0.00887039,\n        0.01540739,  0.0093908 ,  0.0082988 , -0.01015864,  0.00649435,\n        0.00650813,  0.00200256,  0.00893468, -0.01339027, -0.02183875,\n       -0.03468287,  0.01177296,  0.00075857,  0.01528161,  0.01440064,\n       -0.011103  ,  0.00801225,  0.02090904,  0.00122297, -0.01297267,\n        0.00112499, -0.00929083, -0.01659219,  0.01522945])"
       ],
       "metadata": {}
      }
     ],
     "input": [
      "#logarithmic returns\n",
      "logReturns = diff(log(c))\n",
      "logReturns"
     ],
     "language": "python",
     "prompt_number": 15
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "Indices with positive returns = (array([ 0,  1,  4,  5,  6,  7,  9, 10, 11, 12, 16, 17, 18, 19, 21, 22, 23,\n       25, 28], dtype=int64),)\n",
       "text": [
        "Indices with positive returns = (array([ 0,  1,  4,  5,  6,  7,  9, 10, 11, 12, 16, 17, 18, 19, 21, 22, 23,\n       25, 28], dtype=int64),)\n"
       ]
      }
     ],
     "input": [
      "# select positive returns\n",
      "posRetIndices = where(returns > 0)\n",
      "print(\"Indices with positive returns =\", posRetIndices)"
     ],
     "language": "python",
     "prompt_number": 16
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "def getArrValues(indices, values):\n",
      "    results = []\n",
      "    for anIndex in indices:\n",
      "        results.append(values[anIndex])\n",
      "    return results"
     ],
     "language": "python",
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "Values with positive returns = [array([ 0.00953488,  0.01668775,  0.00887039,  0.01540739,  0.0093908 ,\n        0.0082988 ,  0.00649435,  0.00650813,  0.00200256,  0.00893468,\n        0.01177296,  0.00075857,  0.01528161,  0.01440064,  0.00801225,\n        0.02090904,  0.00122297,  0.00112499,  0.01522945])]\n",
       "text": [
        "Values with positive returns = [array([ 0.00953488,  0.01668775,  0.00887039,  0.01540739,  0.0093908 ,\n        0.0082988 ,  0.00649435,  0.00650813,  0.00200256,  0.00893468,\n        0.01177296,  0.00075857,  0.01528161,  0.01440064,  0.00801225,\n        0.02090904,  0.00122297,  0.00112499,  0.01522945])]\n"
       ]
      }
     ],
     "input": [
      "print(\"Values with positive returns =\", \n",
      "      getArrValues(posRetIndices, logReturns))"
     ],
     "language": "python",
     "prompt_number": 18
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "Annual volatility:  129.274789911\nMonthly volatility:  447.821008528\n",
       "text": [
        "Annual volatility:  129.274789911\nMonthly volatility:  447.821008528\n"
       ]
      }
     ],
     "input": [
      "annualVolatility = std(logReturns)/mean(logReturns)\n",
      "annualVolatility = annualVolatility/sqrt(1/252)\n",
      "# 252 = number of business days in a year\n",
      "print(\"Annual volatility: \", annualVolatility)\n",
      "print(\"Monthly volatility: \", annualVolatility/sqrt(1/12))"
     ],
     "language": "python",
     "prompt_number": 21
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "# write converter function for dates\n",
      "import datetime\n",
      "# Monday 0\n",
      "# Tuesday 1\n",
      "# Wednesday 2\n",
      "# Thursday 3\n",
      "# Friday 4\n",
      "# Saturday 5\n",
      "# Sunday 6\n",
      "\n",
      "def convertStrDatesToFloat(s):\n",
      "    return datetime.datetime.strptime(s, \"%d-%m-%Y\").date().weekday()"
     ],
     "language": "python",
     "prompt_number": 64
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "dates, closePricesStr = loadtxt('IO\\\\appledatacsv.txt', str, delimiter=',',\n",
      "                             usecols=(1, 6),\n",
      "                             unpack=True)\n",
      "convertStrDatesToFloat(dates)"
     ],
     "language": "python",
     "prompt_number": 98
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      "# convert string array to float\n",
      "def convertArray(arr):\n",
      "    results = []\n",
      "    for i in range(len(arr)):\n",
      "        results.append(float(arr[i]))\n",
      "    return results"
     ],
     "language": "python",
     "prompt_number": 96
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "could not convert string to float: \"b' 336.1'\"",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[1;32m<ipython-input-97-4e22b8322727>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mconvertArray\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mclosePrices\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[1;32m<ipython-input-96-3046473be1d7>\u001b[0m in \u001b[0;36mconvertArray\u001b[1;34m(arr)\u001b[0m\n\u001b[0;32m      3\u001b[0m     \u001b[0mresults\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m         \u001b[0mresults\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0marr\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
        "\u001b[1;31mValueError\u001b[0m: could not convert string to float: \"b' 336.1'\""
       ]
      }
     ],
     "input": [
      "convertArray(closePrices)"
     ],
     "language": "python",
     "prompt_number": 97
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    },
    {
     "cell_type": "code",
     "metadata": {},
     "outputs": [],
     "input": [
      ""
     ],
     "language": "python"
    }
   ]
  }
 ],
 "cells": [],
 "metadata": {},
 "nbformat": 3,
 "nbformat_minor": 0
}